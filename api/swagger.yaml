openapi: 3.0.3
info:
  title: OneLogin API
  version: 3.0.0-alpha.1
servers:
- url: "https://{subdomain}.{domain}.com"
  variables:
    subdomain:
      default: onelogininc
    domain:
      default: onelogin
paths:
  /auth/oauth2/v2/token:
    post:
      operationId: generateToken
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generateToken_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_200_response'
        "400":
          description: "Typically, either grant_type value is incorrect or Authorization\
            \ header is incorrectly formatted."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
        "401":
          description: "Typically, this error means that your client_id and/or client_secret\
            \ values are invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
        "404":
          description: "Typically, this error means that you are using the incorrect\
            \ method. Ensure that you are making a POST."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
  /auth/oauth2/revoke:
    post:
      operationId: revokeToken
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/revokeToken_request'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
        "400":
          description: "Possibly, the Authorization header is incorrectly formatted."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
        "401":
          description: "Typically, this error means that your client_id and/or client_secret\
            \ values are invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
        "404":
          description: "Typically, this error means that you are using the incorrect\
            \ method. Ensure that you are making a POST."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
  /auth/rate_limit:
    get:
      operationId: getRateLimit
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRateLimit_200_response'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateToken_400_response'
  /api/2/api_authorizations:
    get:
      operationId: listAuthorizationServers
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listAuthorizationServers_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createAuthorizationServer
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/auth_server'
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Audiences are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/api_authorizations/{id}:
    get:
      operationId: getAuthorizationServer
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAuthorizationServer_200_response'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateAuthorizationServer
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/auth_server'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        "400":
          description: You need to submit all of the attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateAuthorizationServer_400_response'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: deleteAuthorizationServer
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/api_authorizations/{id}/claims:
    get:
      operationId: listAccessTokenClaims
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listAccessTokenClaims_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: addAccessTokenClaim
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/claim'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: This name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/api_authorizations/{id}/claims/{claim_id}:
    put:
      operationId: updateAccessTokenClaim
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: claim_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/claim'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: This name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: deleteAccessTokenClaim
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: claim_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/api_authorizations/{id}/scopes:
    get:
      operationId: listScopes
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listScopes_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: addScope
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/scope'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: This name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/api_authorizations/{id}/scopes/{scope_id}:
    put:
      operationId: updateScope
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: scope_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/scope'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: This name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: deleteScope
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: scope_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/api_authorizations/{id}/clients:
    get:
      operationId: getClientApps
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getClientApps_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: addClientApp
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addClientApp_request'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client_app'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: An invalid scope id has been provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/api_authorizations/{id}/clients/{client_app_id}:
    put:
      operationId: updateClientApp
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: client_app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateClientApp_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client_app'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: An invalid scope id has been provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: removeClientApp
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: client_app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps:
    get:
      operationId: listApps
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: The name or partial name of the app to search for. When using
          a partial name you must append a wildcard `*`
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/name'
      - name: connector_id
        in: query
        description: Returns all apps based off a specific connector. See List Connectors
          for a complete list of Connector IDs.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/connector_id'
      - name: auth_method
        in: query
        description: Returns all apps based of a given type.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/auth_method'
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schema'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createApp
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/app'
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schema'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}:
    get:
      operationId: getApp
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schema'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateApp
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      requestBody:
        $ref: '#/components/requestBodies/app'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schema'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: deleteApp
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/parameters/{parameter_id}:
    delete:
      operationId: deleteAppParameter
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: parameter_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "403":
          description: You attempted to delete a connector level parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/users:
    get:
      operationId: listAppUsers
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listAppUsers_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/rules:
    get:
      operationId: listRules
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: enabled
        in: query
        description: Defaults to true. When set to `false` will return all disabled
          rules.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: has_condition
        in: query
        description: Filters Rules based on their Conditions.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: has_condition_type
        in: query
        description: Filters Rules based on their condition types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: has_action
        in: query
        description: Filters Rules based on their Actions.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: has_action_type
        in: query
        description: Filters Rules based on their action types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/rule'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      requestBody:
        $ref: '#/components/requestBodies/rule'
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule_id'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: UNPROCESSABLE ENTRY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_status'
  /api/2/apps/{app_id}/rules/{rule_id}:
    get:
      operationId: getRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: rule_id
        in: path
        description: The id of the app rule to locate.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: rule_id
        in: path
        description: The id of the app rule to locate.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
      requestBody:
        $ref: '#/components/requestBodies/rule'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule_id'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: ID should not be included in the payload body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_status'
    delete:
      operationId: deleteRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: rule_id
        in: path
        description: The id of the app rule to locate.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/rules/conditions:
    get:
      operationId: listConditions
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listConditions_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/rules/conditions/{condition_value}/operators:
    get:
      operationId: listConditionOperators
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: condition_value
        in: path
        description: The value for the selected condition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listConditionOperators_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/rules/conditions/{condition_value}/values:
    get:
      operationId: listConditionValues
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: condition_value
        in: path
        description: The value for the selected condition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listConditionValues_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/rules/actions:
    get:
      operationId: listActions
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listActions_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/rules/actions/{actuion_value}/values:
    get:
      operationId: listActionValues
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      - name: action_value
        in: path
        description: The value for the selected action.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listConditionValues_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/{app_id}/rules/sort:
    put:
      operationId: bulkSort
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: app_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
      requestBody:
        description: The request body must contain an array of App Rule IDs in the
          desired order.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule_id_list'
        required: true
      responses:
        "200":
          description: On success a complete list of ordered rules is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule_id_list'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that not all rule IDs were included in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_status'
  /api/2/connectors:
    get:
      operationId: listConnectors
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: The name or partial name of the connector to search for. When
          using a partial name you must append a wildcard `*`
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/name_1'
      - name: auth_method
        in: query
        description: Returns all connectors of a given type.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/auth_method'
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/connector'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mfa/users/{user_id}/factors:
    get:
      operationId: getAvailableFactors
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getAvailableFactors_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mfa/users/{user_id}/registrations:
    post:
      operationId: enrollFactor
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/enrollFactor_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/factor'
                x-content-type: application/json
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/factor'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mfa/users/{user_id}/registrations/{registration_id}:
    get:
      operationId: verifyEnrollmentVoiceProtect
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: registration_id
        in: path
        description: Set to the uuid of the registration. This was included in the
          response as part of the initial request in Enroll Factor.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/registration'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: verifyEnrollment
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: registration_id
        in: path
        description: Set to the uuid of the registration. This was included in the
          response as part of the initial request in Enroll Factor.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyEnrollment_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/registration'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mfa/users/{user_id}/devices:
    get:
      operationId: getEnrolledFactors
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/device'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mfa/users/{user_id}/devices/{device_id}:
    delete:
      operationId: deleteFactor
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: device_id
        in: path
        description: Set to the device_id of the MFA device.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: NO CONTENT
  /api/2/mfa/users/{user_id}/verifications:
    post:
      operationId: activateFactor
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activateFactor_request'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            application/json: {}
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mfa/users/{user_id}/verifications/{verification_id}:
    get:
      operationId: verifyFactorVoice
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: verification_id
        in: path
        description: The verification_id is returned on activation of the factor or
          you can get the device_id using the Activate Factor API call.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/verifyFactorVoice_200_response_inner'
                x-content-type: application/json
        "401":
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_2'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: verifyFactor
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: verification_id
        in: path
        description: The verification_id is returned on activation of the factor or
          you can get the device_id using the Activate Factor API call.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyFactor_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_2'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "403":
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mfs/users/{user_id}/mfa_token:
    post:
      operationId: generateMfaToken
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generateMfaToken_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateMfaToken_200_response'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: The structure of the request payload is correct but it contains
            an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateMfaToken_422_response'
  /api/2/roles:
    get:
      operationId: listRoles
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Optional. Filters by role name.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/name_2'
      - name: app_id
        in: query
        description: Optional. Returns roles that contain this app name.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/name'
      - name: fields
        in: query
        description: Optional. Comma delimited list of fields to return.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - apps
          - users
          - admins
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createRoles
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/createRoles_201_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/roles/{role_id}:
    get:
      operationId: getRole
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateRole
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      requestBody:
        $ref: '#/components/requestBodies/role'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateRole_200_response'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: deleteRole
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/roles/{role_id}/apps:
    get:
      operationId: getRoleApps
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigned
        in: query
        description: Optional. Defaults to true. Returns all apps not yet assigned
          to the role.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schema'
                x-content-type: applcation/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: setRoleApps
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: The complete list of app_id values to assign to the role.
                Don't submit a partial list of app IDs.
              items:
                $ref: '#/components/schemas/id_1'
        required: true
      responses:
        "200":
          description: The response returns an array of app IDs sent in the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/setRoleApps_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/roles/{role_id}/users:
    get:
      operationId: getRoleUsers
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: "Allows you to filter on first name, last name, username, and\
          \ email address."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: include_unassigned
        in: query
        description: Optional. Defaults to false. Include users that aren’t assigned
          to the role.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schema_1'
                x-content-type: applcation/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: addRoleUsers
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Set user_id values in array,"
              items:
                $ref: '#/components/schemas/id_2'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/addRoleUsers_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: removeRoleUsers
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeRoleUsers_request'
        required: true
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/roles/{role_id}/admins:
    get:
      operationId: getRoleAdmins
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: "Allows you to filter on first name, last name, username, and\
          \ email address."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: include_unassigned
        in: query
        description: Optional. Defaults to false. Include users that aren’t assigned
          to the role.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schema_1'
                x-content-type: applcation/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: addRoleAdmins
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Set user_id values in array,"
              items:
                $ref: '#/components/schemas/id_2'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/addRoleUsers_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: removeRoleAdmins
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role_id
        in: path
        description: Set to the id of the role you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/role_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeRoleUsers_request'
        required: true
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/saml_assertion:
    post:
      operationId: generateSamlAssertion
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generateSamlAssertion_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json: {}
  /api/2/saml_assertion/verify_factor:
    post:
      operationId: verifyFactorSaml
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyFactorSaml_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyFactorSaml_200_response'
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/hooks:
    get:
      operationId: listHooks
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hook'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createHook
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/hook'
  /api/2/hooks/{hook_id}:
    get:
      operationId: getHook
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hook_id
        in: path
        description: Set to the id of the Hook that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_3'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateHook
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hook_id
        in: path
        description: Set to the id of the Hook that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_3'
      requestBody:
        $ref: '#/components/requestBodies/hook'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: You function is not base64 encoded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook_status'
    delete:
      operationId: deleteHook
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hook_id
        in: path
        description: Set to the id of the Hook that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_3'
      responses:
        "202":
          description: Success. The hook function has been queued for deletion. This
            typically happens within seconds of making the request.
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/hooks/{hook_id}/logs:
    get:
      operationId: getLogs
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hook_id
        in: path
        description: Set to the id of the Hook that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_3'
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: request_id
        in: query
        description: Returns logs that contain this request_id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: correlation_id
        in: query
        description: Returns logs that contain this correlation_id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/log'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/hooks/envs:
    get:
      operationId: listEnvironmentVariables
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/envvar'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createEnvironmentVariable
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEnvironmentVariable_request'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/envvar'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/hooks/envs/{envvar_id}:
    get:
      operationId: getEnvironmentVariable
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: envvar_id
        in: path
        description: Set to the id of the Hook Environment Variable that you want
          to fetch.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_4'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/envvar'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateEnvironmentVariable
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: envvar_id
        in: path
        description: Set to the id of the Hook Environment Variable that you want
          to fetch.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_4'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateEnvironmentVariable_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/envvar'
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: The name of a var can not be changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook_status'
    delete:
      operationId: deleteEnvironmentVariable
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: envvar_id
        in: path
        description: Set to the id of the Hook Environment Variable that you want
          to fetch.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_4'
      responses:
        "204":
          description: Success. The environment variable has been deleted. No content
            is returned.
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/users:
    get:
      operationId: listUsers
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: "The total number of items returned per page. The maximum limit\
          \ varies between endpoints, see the relevant endpoint documentation for\
          \ the specific limit."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number of results to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: cursor
        in: query
        description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: created_since
        in: query
        description: An ISO8601 timestamp value that returns all users created after
          a given date & time.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: created_until
        in: query
        description: An ISO8601 timestamp value that returns all users created before
          a given date & time.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: updated_since
        in: query
        description: An ISO8601 timestamp value that returns all users updated after
          a given date & time.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: updated_until
        in: query
        description: An ISO8601 timestamp value that returns all users updated before
          a given date & time.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: last_login_since
        in: query
        description: An ISO8601 timestamp value that returns all users that logged
          in after a given date & time.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: last_login_until
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstname
        in: query
        description: The first name of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastname
        in: query
        description: The last name of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: email
        in: query
        description: The email address of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: member_of
        in: query
        description: The member_of attribute in AD
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: username
        in: query
        description: The username for the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: samaccountname
        in: query
        description: The AD login name for the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: directory_id
        in: query
        description: The ID in OneLogin of the Directory that the user belongs to
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: external_id
        in: query
        description: An external identifier that has been set on the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: app_id
        in: query
        description: The ID of a OneLogin Application
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: user_ids
        in: query
        description: A comma separated list of OneLogin User IDs
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "custom_attributes.{attribute_name}"
        in: query
        description: The short name of a custom attribute. Note that the attribute
          name is prefixed with custom_attributes.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fields
        in: query
        description: A comma separated list user attributes to return.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
        "400":
          description: An invalid search parameter was used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: You cant sort on this field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createUser
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mappings
        in: query
        description: Controls how mappings will be applied to the user on creation.
          Defaults to async.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - async
          - sync
          - disabled
      - name: validate_policy
        in: query
        description: Will passwords validate against the User Policy? Defaults to
          true.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        $ref: '#/components/requestBodies/user'
      responses:
        "201":
          description: The full user resource is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/users/{user_id}:
    get:
      operationId: getUser
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateUser
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
      - name: mappings
        in: query
        description: Controls how mappings will be applied to the user on creation.
          Defaults to async.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - async
          - sync
          - disabled
      - name: validate_policy
        in: query
        description: Will passwords validate against the User Policy? Defaults to
          true.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        $ref: '#/components/requestBodies/user'
      responses:
        "200":
          description: The full user resource is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that the syntax of the request is good but a value
            supplied is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    delete:
      operationId: deleteUser
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
      responses:
        "204":
          description: "On success, no content is returned in the response body."
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/users/{user_id}/apps:
    get:
      operationId: getUserApps
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: Set to the id of the user that you want to return.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
      - name: ignore_visibility
        in: query
        description: Defaults to `false`. When `true` will show all apps that are
          assigned to a user regardless of their portal visibility setting.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getUserApps_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mappings:
    get:
      operationId: listMappings
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: enabled
        in: query
        description: Defaults to true. When set to `false` will return all disabled
          mappings.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: has_condition
        in: query
        description: Filters Mappings based on their Conditions.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "has_condition=has_role:123456,status:1"
      - name: has_condition_type
        in: query
        description: Filters Mappings based on their condition types.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - builtin
          - custom
          - none
      - name: has_action
        in: query
        description: Filters Mappings based on their Actions.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "has_action=set_groups:123456,set_usertype:*"
      - name: has_action_type
        in: query
        description: Filters Mappings based on their action types.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - builtin
          - custom
          - none
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mapping'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    post:
      operationId: createMapping
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/mapping'
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_2'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: UNPROCESSABLE_ENTRY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_status'
  /api/2/mappings/{mapping_id}:
    get:
      operationId: getMapping
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mapping_id
        in: path
        description: The id of the user mapping to locate.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mapping'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
    put:
      operationId: updateMapping
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mapping_id
        in: path
        description: The id of the user mapping to locate.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/mapping'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_2'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: UNPROCESSABLE_ENTRY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_status'
    delete:
      operationId: deleteMapping
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mapping_id
        in: path
        description: The id of the user mapping to locate.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: NO CONTENT
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "404":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/mappings/{mapping_id}/dryrun:
    post:
      operationId: dryRunMapping
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mapping_id
        in: path
        description: The id of the user mapping to locate.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Request body is a list of user IDs tested against the mapping
          conditions to verify that the mapping would be applied
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: UNPROCESSABLE_ENTRY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_status'
  /api/2/apps/mappings/conditions:
    get:
      operationId: listMappingConditions
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listMappingConditions_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/mappings/conditions/{condition_value}/operators:
    get:
      operationId: listMappingConditionOperators
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: condition_value
        in: path
        description: The value for the selected condition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listMappingConditionOperators_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/mappings/conditions/{condition_value}/values:
    get:
      operationId: listMappingConditionValues
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: condition_value
        in: path
        description: The value for the selected condition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listConditionValues_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/mappings/actions:
    get:
      operationId: listMappingActions
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listActions_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/mappings/actions/{actuion_value}/values:
    get:
      operationId: listMappingActionValues
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: action_value
        in: path
        description: The value for the selected action.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listConditionValues_200_response_inner'
                x-content-type: application/json
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
  /api/2/apps/mappings/sort:
    put:
      operationId: bulkMappingSort
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The request body must contain an array of User Mapping IDs in
          the desired order.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mapping_id_list'
        required: true
      responses:
        "200":
          description: On success a complete list of ordered mappings is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mapping_id_list'
        "401":
          description: "Typically, this error means that your access token value is\
            \ invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_1'
        "422":
          description: Indicates that not all mapping IDs were included in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_status'
  /api/2/risk/events:
    post:
      operationId: trackEvent
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trackEvent_request'
        required: true
      responses:
        "200":
          description: No content is returned. This API is fire and forget.
        "400":
          description: BAD REQUEST
        "401":
          description: Invalid API Key
  /api/2/risk/verify:
    post:
      operationId: getRiskScore
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getRiskScore_request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRiskScore_200_response'
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRiskScore_400_response'
        "401":
          description: Invalid API Key
  /api/2/risk/rules:
    get:
      operationId: listRiskRules
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
    post:
      operationId: createRiskRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/risk_rule'
  /api/2/risk/rules/{risk_rule_id}:
    get:
      operationId: getRiskRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: risk_rule_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_5'
    put:
      operationId: updateRiskRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: risk_rule_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_5'
      requestBody:
        $ref: '#/components/requestBodies/risk_rule'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rule'
        "400":
          description: BAD REQUEST
        "401":
          description: UNAUTHORIZED
    delete:
      operationId: deleteRiskRule
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: risk_rule_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_5'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rule'
        "401":
          description: Invalid API Key
  /api/2/risk/scores:
    get:
      operationId: getScoreInsights
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: before
        in: query
        description: Optional ISO8601 formatted date string. Defaults to current date.
          Maximum date is 90 days ago.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: after
        in: query
        description: Optional ISO8601 formatted date string. Defaults to 30 days ago.
          Maximum date is 90 days ago.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getScoreInsights_200_response'
        "401":
          description: Invalid Access Token
components:
  schemas:
    status:
      type: object
      properties:
        error:
          type: boolean
        code:
          type: integer
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        error: true
        type: type
        message: message
    id:
      type: object
      properties:
        id:
          type: string
      example:
        id: id
    status_1:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
        name:
          type: string
    auth_server_configuration:
      type: object
      properties:
        audiences:
          type: array
          items:
            type: string
        refresh_token_expiration_minutes:
          type: integer
        resource_identifier:
          type: string
        access_token_expiration_minutes:
          type: integer
      example:
        access_token_expiration_minutes: 6
        resource_identifier: resource_identifier
        audiences:
        - audiences
        - audiences
        refresh_token_expiration_minutes: 0
    client_app:
      type: object
      properties:
        app_id:
          type: integer
        api_auth_id:
          type: integer
      example:
        api_auth_id: 6
        app_id: 0
    name:
      type: string
      description: App name.
    connector_id:
      type: integer
      description: ID of the apps underlying connector.
    auth_method:
      type: integer
      description: An ID indicating the type of app.
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 6
      - 7
      - 8
    schema:
      type: object
      properties:
        id:
          type: integer
          description: Apps unique ID in OneLogin.
        connector_id:
          type: integer
          description: ID of the apps underlying connector.
        name:
          type: string
          description: App name.
        description:
          type: string
          description: Freeform description of the app.
        notes:
          type: string
          description: Freeform notes about the app.
        policy_id:
          type: integer
          description: The security policy assigned to the app.
        brand_id:
          type: integer
          description: The custom login page branding to use for this app. Applies
            to app initiated logins via OIDC or SAML.
        icon_url:
          type: string
          description: A link to the apps icon url.
        visible:
          type: boolean
          description: Indicates if the app is visible in the OneLogin portal.
        auth_method:
          type: integer
          description: An ID indicating the type of app.
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 6
          - 7
          - 8
        tab_id:
          type: integer
          description: ID of the OneLogin portal tab that the app is assigned to.
        created_at:
          type: string
          description: The date the app was created.
        updated_at:
          type: string
          description: The date the app was last updated.
        role_ids:
          type: array
          description: List of Role IDs that are assigned to the app. On App Create
            or Update the entire array is replaced with the values provided.
          items:
            type: integer
        allow_assumed_signin:
          type: boolean
          description: Indicates whether or not administrators can access the app
            as a user that they have assumed control over.
        provisioning:
          $ref: '#/components/schemas/schema_provisioning'
        sso:
          type: object
        configuration:
          type: object
        parameters:
          type: object
        enforcement_point:
          type: object
      example:
        icon_url: icon_url
        notes: notes
        visible: true
        policy_id: 1
        configuration: "{}"
        allow_assumed_signin: true
        description: description
        created_at: created_at
        role_ids:
        - 7
        - 7
        sso: "{}"
        brand_id: 5
        auth_method: 5
        tab_id: 2
        enforcement_point: "{}"
        updated_at: updated_at
        connector_id: 6
        name: name
        provisioning:
          enabled: true
        id: 0
        parameters: "{}"
    id_1:
      type: integer
      description: Apps unique ID in OneLogin.
    rule:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: The name of the rule.
        match:
          type: string
          description: Indicates how conditions should be matched.
          enum:
          - all
          - any
        enabled:
          type: boolean
          description: Indicates if the rule is enabled or not.
        position:
          type: integer
          description: Indicates the order of the rule. When `null` this will default
            to last position.
        conditions:
          type: array
          description: An array of conditions that the user must meet in order for
            the rule to be applied.
          items:
            $ref: '#/components/schemas/condition'
        actions:
          type: array
          description: An array of actions that will be applied to the users that
            are matched by the conditions.
          items:
            $ref: '#/components/schemas/action'
      example:
        name: name
        match: all
        id: 0
        position: 6
        conditions:
        - source: source
          value: value
          operator: operator
        - source: source
          value: value
          operator: operator
        actions:
        - macro: macro
          expression: expression
          scriplet: scriplet
          action: action
          value:
          - value
          - value
        - macro: macro
          expression: expression
          scriplet: scriplet
          action: action
          value:
          - value
          - value
        enabled: true
    rule_id:
      type: object
      properties:
        id:
          type: integer
      example:
        id: 0
    id_2:
      type: integer
    error_status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/error_status_errors_inner'
    rule_id_list:
      type: array
      items:
        type: integer
      x-schema-name: rule_id_list
    connector:
      type: object
      properties:
        id:
          type: integer
          description: The connectors unique ID in OneLogin.
        name:
          type: string
          description: The name of the connector.
        auth_method:
          $ref: '#/components/schemas/auth_method'
        allows_new_parameters:
          type: boolean
          description: Indicates if apps created using this connector will be allowed
            to create custom parameters.
        icon_url:
          type: string
          description: A link to the apps icon url.
      example:
        icon_url: icon_url
        allows_new_parameters: true
        name: name
        id: 0
    name_1:
      type: string
      description: The name of the connector.
    factor:
      type: array
      items:
        $ref: '#/components/schemas/factor_inner'
      x-schema-name: factor
    registration:
      type: object
      properties:
        id:
          type: string
          description: Registration identifier.
        status:
          type: string
          description: pending registration has not been completed successfully. accepted
            registration has successfully completed.
          enum:
          - pending
          - accepted
        device_id:
          type: string
          description: Device id to be used with Verify the Factor.
      example:
        device_id: device_id
        id: id
        status: pending
    device:
      type: object
      properties:
        device_id:
          type: string
        user_display_name:
          type: string
        type_display_name:
          type: string
        auth_factor_name:
          type: string
        default:
          type: boolean
      example:
        type_display_name: type_display_name
        default: true
        device_id: device_id
        auth_factor_name: auth_factor_name
        user_display_name: user_display_name
    status_2:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/status_2_status'
      example:
        status:
          code: 0
          type: type
          message: message
          error: true
    role:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        apps:
          type: array
          items:
            $ref: '#/components/schemas/id_1'
        users:
          type: array
          items:
            type: integer
        admins:
          type: array
          items:
            type: integer
      example:
        name: name
        id: 0
        users:
        - 6
        - 6
        admins:
        - 1
        - 1
        apps:
        - null
        - null
    role_id:
      type: integer
    name_2:
      type: string
    schema_1:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        added_by:
          $ref: '#/components/schemas/schema_1_added_by'
        added_at:
          type: string
        assigned:
          type: boolean
          description: Indicates if assigned to role or not. Defaults to true.
      example:
        added_at: added_at
        added_by:
          name: name
          id: 6
        name: name
        assigned: true
        id: 0
        username: username
    hook:
      required:
      - disabled
      - env_vars
      - function
      - packages
      - retries
      - runtime
      - timeout
      - type
      type: object
      properties:
        id:
          type: string
          description: The Hook unique ID in OneLogin.
        type:
          type: string
          description: A string describing the type of hook. e.g. `pre-authentication`
        disabled:
          type: boolean
          description: Boolean to enable or disable the hook. Disabled hooks will
            not run.
          default: true
        timeout:
          type: integer
          description: The number of seconds to allow the hook function to run before
            before timing out. Maximum timeout varies based on the type of hook.
          default: 1
        env_vars:
          type: array
          description: Environment Variable objects that will be available via process.env.ENV_VAR_NAME
            in the hook code.
          items:
            type: string
        runtime:
          type: string
          description: The Smart Hooks supported Node.js version to execute this hook
            with.
        retries:
          maximum: 4
          type: integer
          description: Number of retries if execution fails.
          default: 0
        packages:
          type: object
          description: An object containing NPM packages that are bundled with the
            hook function.
        function:
          type: string
          description: A base64 encoded string containing the javascript function
            code.
        context_version:
          type: string
          description: The semantic version of the content that will be injected into
            this hook.
        status:
          type: string
          description: String describing the state of the hook function. When a hook
            is ready and disabled is false it will be executed.
          enum:
          - ready
          - create-queued
          - create-running
          - create-failed
          - update-queued
          - update-running
          - update-failed
        options:
          $ref: '#/components/schemas/hook_options'
        conditions:
          type: array
          description: An array of objects that let you limit the execution of a hook
            to users in specific roles.
          items:
            $ref: '#/components/schemas/hook_conditions_inner'
        created_at:
          type: string
          description: ISO8601 format date that they hook function was created.
        updated_at:
          type: string
          description: ISO8601 format date that they hook function was last updated.
      example:
        runtime: runtime
        created_at: created_at
        type: type
        packages: "{}"
        timeout: 0
        env_vars:
        - env_vars
        - env_vars
        retries: 2
        updated_at: updated_at
        context_version: context_version
        function: function
        options:
          risk_enabled: true
          mfa_device_info_enabled: true
          location_enabled: true
        disabled: true
        id: id
        conditions:
        - source: source
          value: value
          operator: operator
        - source: source
          value: value
          operator: operator
        status: ready
    id_3:
      type: string
      description: The Hook unique ID in OneLogin.
    hook_status:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    log:
      type: object
      properties:
        request_id:
          type: string
        correlation_id:
          type: string
        created_at:
          type: string
        events:
          type: array
          items:
            type: string
      example:
        correlation_id: correlation_id
        created_at: created_at
        request_id: request_id
        events:
        - events
        - events
    envvar:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the Hook Environment Variable
        name:
          type: string
          description: The name of the environment variable.
        created_at:
          type: string
          description: The ISO8601 formatted date that the environment variable was
            created.
        updated_at:
          type: string
          description: The ISO8601 formatted date that the environment variable was
            last updated.
      example:
        updated_at: updated_at
        name: name
        created_at: created_at
        id: id
    id_4:
      type: string
      description: A unique identifier for the Hook Environment Variable
    user:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          description: A username for the user.
        email:
          type: string
          description: A valid email for the user.
        firstname:
          type: string
          description: The user's first name.
        lastname:
          type: string
          description: The user's last name.
        title:
          type: string
          description: The user's job title.
        department:
          type: string
          description: The user's department.
        company:
          type: string
          description: The user's company.
        comment:
          type: string
          description: Free text related to the user.
        group_id:
          type: integer
          description: The ID of the Group in OneLogin that the user is assigned to.
        role_ids:
          type: array
          description: A list of OneLogin Role IDs of the user
          items:
            $ref: '#/components/schemas/role_id'
        phone:
          type: string
          description: The E.164 format phone number for a user.
        state:
          type: integer
          enum:
          - 0
          - 1
          - 2
          - 3
        status:
          type: integer
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 7
          - 8
        directory_id:
          type: integer
          description: The ID of the OneLogin Directory of the user.
        trusted_idp_id:
          type: integer
          description: The ID of the OneLogin Trusted IDP of the user.
        manager_ad_id:
          type: string
          description: The ID of the user's manager in Active Directory.
        manager_user_id:
          type: string
          description: The OneLogin User ID for the user's manager.
        samaccount_name:
          type: string
          description: The user's Active Directory username.
        member_of:
          type: string
          description: The user's directory membership.
        userprincipalname:
          type: string
          description: The principle name of the user.
        distinguished_name:
          type: string
          description: The distinguished name of the user.
        external_id:
          type: string
          description: The ID of the user in an external directory.
        activated_at:
          type: string
        last_login:
          type: string
        invitation_sent_at:
          type: string
        updated_at:
          type: string
        preferred_locale_code:
          type: string
        created_at:
          type: string
        custom_attributes:
          type: object
        invalid_login_attempts:
          type: integer
        locked_until:
          type: string
        password_changed_at:
          type: string
        password:
          type: string
          description: The password to set for a user.
        password_confirmation:
          type: string
          description: Required if the password is being set.
        password_algorithm:
          type: string
          description: Use this when importing a password that's already hashed. Prepend
            the salt value to the cleartext password value before SHA-256-encoding
            it
        salt:
          type: string
          description: The salt value used with the password_algorithm.
      example:
        firstname: firstname
        password_confirmation: password_confirmation
        created_at: created_at
        external_id: external_id
        locked_until: locked_until
        title: title
        invitation_sent_at: invitation_sent_at
        role_ids:
        - null
        - null
        custom_attributes: "{}"
        samaccount_name: samaccount_name
        password: password
        updated_at: updated_at
        password_algorithm: password_algorithm
        company: company
        id: 0
        state: 1
        directory_id: 5
        department: department
        member_of: member_of
        email: email
        manager_ad_id: manager_ad_id
        password_changed_at: password_changed_at
        salt: salt
        last_login: last_login
        invalid_login_attempts: 7
        preferred_locale_code: preferred_locale_code
        manager_user_id: manager_user_id
        lastname: lastname
        activated_at: activated_at
        userprincipalname: userprincipalname
        group_id: 6
        phone: phone
        distinguished_name: distinguished_name
        trusted_idp_id: 2
        comment: comment
        username: username
        status: 5
    mapping:
      required:
      - actions
      - contiditions
      - enabled
      - match
      - name
      - position
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: The name of the mapping.
        enabled:
          type: boolean
          description: Indicates if the mapping is enabled or not.
        match:
          type: string
          description: Indicates how conditions should be matched.
          enum:
          - all
          - any
        position:
          type: integer
          description: Indicates the order of the mapping. When `null` this will default
            to last position.
        conditions:
          type: array
          description: An array of conditions that the user must meet in order for
            the mapping to be applied.
          items:
            $ref: '#/components/schemas/condition'
        actions:
          type: array
          description: An array of actions that will be applied to the users that
            are matched by the conditions.
          items:
            $ref: '#/components/schemas/action'
      example:
        name: name
        match: all
        id: 0
        position: 6
        conditions:
        - source: source
          value: value
          operator: operator
        - source: source
          value: value
          operator: operator
        actions:
        - macro: macro
          expression: expression
          scriplet: scriplet
          action: action
          value:
          - value
          - value
        - macro: macro
          expression: expression
          scriplet: scriplet
          action: action
          value:
          - value
          - value
        enabled: true
    mapping_id_list:
      type: array
      items:
        type: integer
      x-schema-name: mapping_id_list
    ip:
      type: string
      description: The IP address of the User's request.
    user_agent:
      type: string
      description: The user agent of the User's request.
    risk_user:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the user.
        name:
          type: string
          description: A name for the user.
        authenticated:
          type: boolean
          description: Indicates if the metadata supplied in this event should be
            considered as trusted for the user.
          default: false
      description: An Object containing User details.
    source:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of the source
      description: "Used for targeting custom rules based on a group of people, customers,\
        \ accounts, or even a single user."
      example:
        name: name
        id: id
    session:
      type: object
      properties:
        id:
          type: string
          description: "If you use a database to track sessions, you can send us the\
            \ session ID."
      description: "A dictionary of extra information that provides useful context\
        \ about the session, for example the session ID, or some cookie information."
    risk_device:
      type: object
      properties:
        id:
          type: string
          description: This device's unique identifier
      description: Information about the device being used.
    fp:
      type: string
      description: Set to the value of the __tdli_fp cookie.
    risk_rule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of this rule
        description:
          type: string
        type:
          type: string
          description: The type parameter specifies the type of rule that will be
            created.
          enum:
          - blacklist
          - whitelist
        target:
          type: string
          description: The target parameter that will be used when evaluating the
            rule against an incoming event.
          enum:
          - location.ip
          - location.address.country_iso_code
        filters:
          type: array
          description: A list of IP addresses or country codes or names to evaluate
            against each event.
          items:
            type: string
        source:
          $ref: '#/components/schemas/source'
      example:
        name: name
        description: description
        id: id
        filters:
        - filters
        - filters
        source:
          name: name
          id: id
        type: blacklist
        target: location.ip
    id_5:
      type: string
    condition:
      type: object
      properties:
        source:
          type: string
          description: The source field to check.
        operator:
          type: string
          description: A valid operator for the selected condition source
        value:
          type: string
          description: A plain text string or valid value for the selected condition
            source.
      example:
        source: source
        value: value
        operator: operator
    action:
      type: object
      properties:
        action:
          type: string
          description: The action to apply
        value:
          type: array
          description: Only applicable to provisioned and set_* actions. Items in
            the array will be a plain text string or valid value for the selected
            action.
          items:
            type: string
        expression:
          type: string
          description: "A regular expression to extract a value. Applies to provisionable,\
            \ multi-selects, and string actions."
        scriplet:
          type: string
          description: A hash containing scriptlet code that returns a value.
        macro:
          type: string
          description: "A template to construct a value. Applies to default, string,\
            \ and list actions."
      example:
        macro: macro
        expression: expression
        scriplet: scriplet
        action: action
        value:
        - value
        - value
    generateToken_request:
      type: object
      properties:
        grant_type:
          type: string
          enum:
          - client_credentials
    generateToken_200_response:
      type: object
      properties:
        access_token:
          type: string
        created_at:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        token_type:
          type: string
        accountt_id:
          type: integer
      example:
        access_token: access_token
        refresh_token: refresh_token
        created_at: created_at
        token_type: token_type
        expires_in: 0
        accountt_id: 6
    generateToken_400_response:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/status'
      example:
        status:
          code: 0
          error: true
          type: type
          message: message
    revokeToken_request:
      type: object
      properties:
        access_token:
          type: string
    getRateLimit_200_response_data:
      type: object
      properties:
        X-RateLimit-Limit:
          type: integer
        X-RateLimit-Remaining:
          type: integer
        X-RateLimit-Reset:
          type: integer
      example:
        X-RateLimit-Remaining: 6
        X-RateLimit-Reset: 1
        X-RateLimit-Limit: 0
    getRateLimit_200_response:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/status'
        data:
          $ref: '#/components/schemas/getRateLimit_200_response_data'
      example:
        data:
          X-RateLimit-Remaining: 6
          X-RateLimit-Reset: 1
          X-RateLimit-Limit: 0
        status:
          code: 0
          error: true
          type: type
          message: message
    listAuthorizationServers_200_response_inner_configuration:
      type: object
      properties:
        resource_identifier:
          type: string
        audiences:
          type: array
          items:
            type: string
      example:
        resource_identifier: resource_identifier
        audiences:
        - audiences
        - audiences
    listAuthorizationServers_200_response_inner:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        configuration:
          $ref: '#/components/schemas/listAuthorizationServers_200_response_inner_configuration'
        description:
          type: string
      example:
        configuration:
          resource_identifier: resource_identifier
          audiences:
          - audiences
          - audiences
        name: name
        description: description
        id: 0
    createAuthorizationServer_request:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        configuration:
          $ref: '#/components/schemas/auth_server_configuration'
    getAuthorizationServer_200_response:
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/auth_server_configuration'
        id:
          type: integer
        description:
          type: string
        name:
          type: string
      example:
        configuration:
          access_token_expiration_minutes: 6
          resource_identifier: resource_identifier
          audiences:
          - audiences
          - audiences
          refresh_token_expiration_minutes: 0
        name: name
        description: description
        id: 1
    updateAuthorizationServer_400_response:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
        statusCode:
          type: integer
        name:
          type: string
    listAccessTokenClaims_200_response_inner:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
        user_attribute_mappings:
          type: string
        user_attribute_macros:
          type: string
        attributes_transformations:
          type: string
        skip_if_blank:
          type: boolean
        values:
          type: array
          items:
            type: string
        default_values:
          type: string
        provisioned_entitlements:
          type: boolean
      example:
        default_values: default_values
        provisioned_entitlements: true
        attributes_transformations: attributes_transformations
        values:
        - values
        - values
        user_attribute_macros: user_attribute_macros
        skip_if_blank: true
        id: 0
        label: label
        user_attribute_mappings: user_attribute_mappings
    addAccessTokenClaim_request:
      type: object
      properties:
        name:
          type: string
        user_attribute_mappings:
          type: string
        user_attribute_macros:
          type: string
    listScopes_200_response_inner:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
        description:
          type: string
      example:
        description: description
        id: 0
        value: value
    addScope_request:
      type: object
      properties:
        value:
          type: string
        description:
          type: string
    getClientApps_200_response_inner_scopes_inner:
      type: object
      properties:
        description:
          type: string
        value:
          type: string
        id:
          type: integer
      example:
        description: description
        id: 0
        value: value
    getClientApps_200_response_inner:
      type: object
      properties:
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/getClientApps_200_response_inner_scopes_inner'
        app_id:
          type: integer
        name:
          type: string
        api_auth_id:
          type: integer
      example:
        name: name
        scopes:
        - description: description
          id: 0
          value: value
        - description: description
          id: 0
          value: value
        api_auth_id: 1
        app_id: 6
    addClientApp_request:
      type: object
      properties:
        app_id:
          type: integer
        scopes:
          type: array
          items:
            type: integer
    updateClientApp_request:
      type: object
      properties:
        scopes:
          type: array
          items:
            type: integer
    listAppUsers_200_response_inner:
      type: object
      properties:
        firstname:
          type: string
        id:
          type: integer
        email:
          type: string
        lastname:
          type: string
        username:
          type: string
      example:
        firstname: firstname
        id: 0
        email: email
        lastname: lastname
        username: username
    listConditions_200_response_inner:
      type: object
      properties:
        name:
          type: string
          description: The name of the Condition.
        value:
          type: string
          description: The unique identifier of the condition. This should be used
            when defining conditions for a rule.
      example:
        name: name
        value: value
    listConditionOperators_200_response_inner:
      type: object
      properties:
        name:
          type: string
          description: The name or description of the operator.
        value:
          type: string
          description: The condition operator value to use when creating or updating
            App Rules.
      example:
        name: name
        value: value
    listConditionValues_200_response_inner:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      example:
        name: name
        value: value
    listActions_200_response_inner:
      type: object
      properties:
        name:
          type: string
          description: The name of the Action.
        value:
          type: string
          description: The unique identifier of the action. This should be used when
            defining actions for a User Mapping.
      example:
        name: name
        value: value
    getAvailableFactors_200_response_inner:
      type: object
      properties:
        factor_id:
          type: integer
          description: Identifier for the factor which will be used for user enrollment
        name:
          type: string
          description: "Authentication factor name, as it appears to administrators\
            \ in OneLogin."
        auth_factor_name:
          type: string
          description: Internal use only
      example:
        name: name
        factor_id: 0
        auth_factor_name: auth_factor_name
    enrollFactor_request:
      required:
      - display_name
      - factor_id
      type: object
      properties:
        factor_id:
          type: integer
          description: The identifier of the factor to enroll the user with.
        display_name:
          type: string
          description: A name for the users device.
        expires_in:
          type: string
          description: "Defaults to 120. Valid values are: 120-900 seconds."
        verified:
          type: boolean
          description: Defaults to false.
        redirect_to:
          type: string
          description: Redirects MagicLink success page to specified URL after 2 seconds.
        custom_message:
          type: string
          description: A message template that will be sent via SMS. Max length of
            the message after template items are inserted is 160 characters including
            the OTP code.
    verifyEnrollment_request:
      type: object
      properties:
        otp:
          type: integer
    activateFactor_request:
      type: object
      properties:
        device_id:
          type: integer
          description: Required. Specifies the factor to be verified.
        expires_in:
          type: integer
          description: 'Optional. Sets the window of time in seconds that the factor
            must be verified within. '
        redirect_to:
          type: string
          description: Optional. Only applies to Email MagicLink factor.
        custom_message:
          type: string
          description: Optional. Only applies to SMS factor. A message template that
            will be sent via SMS.
    verifyFactorVoice_200_response_inner:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum:
          - pending
          - accepted
          - rejected
        device_id:
          type: string
      example:
        device_id: device_id
        id: id
        status: pending
    verifyFactor_request:
      type: object
      properties:
        otp:
          type: string
          description: OTP code provided by the device or SMS message sent to user.
        device_id:
          type: integer
          description: ID of the specified device which has been registerd for the
            given user.
    generateMfaToken_request:
      type: object
      properties:
        expires_in:
          type: string
          description: Set the duration of the token in seconds.
        reusable:
          type: boolean
          description: Defines if the token is reusable multiple times within the
            expiry window.
    generateMfaToken_200_response:
      type: object
      properties:
        mfa_token:
          type: string
          description: Token can function as a temporary MFA token. It can be used
            to authenticate for any app when valid.
        reusable:
          type: boolean
          description: true indcates the token can be used multiple times. false indicates
            the token is invalid after a single use
        expires_at:
          type: string
          description: Defines the expiration time and date for the token. Format
            is UTC time.
        device_id:
          type: string
          description: Defines the expiration time and date for the token. Format
            is UTC time.
      example:
        expires_at: expires_at
        device_id: device_id
        mfa_token: mfa_token
        reusable: true
    generateMfaToken_422_response_details:
      type: object
      properties:
        parameters:
          type: array
          items:
            type: string
    generateMfaToken_422_response:
      type: object
      properties:
        statusCode:
          type: integer
        name:
          type: string
        message:
          type: string
        details:
          $ref: '#/components/schemas/generateMfaToken_422_response_details'
    createRoles_201_response_inner:
      type: object
      properties:
        id:
          type: integer
      example:
        id: 0
    updateRole_200_response:
      type: object
      properties:
        id:
          type: integer
      example:
        id: 0
    setRoleApps_200_response_inner:
      type: object
      properties:
        id:
          type: integer
          description: Apps unique ID in OneLogin.
      example:
        id: 0
    addRoleUsers_200_response_inner:
      type: object
      properties:
        id:
          type: integer
      example:
        id: 0
    removeRoleUsers_request:
      type: object
      properties:
        user_id:
          type: array
          items:
            $ref: '#/components/schemas/id_2'
    generateSamlAssertion_request:
      required:
      - app_id
      - password
      - subdomain
      - username_or_email
      type: object
      properties:
        username_or_email:
          type: string
          description: Set this to the username or email of the OneLogin user accessing
            the app for which you want to generate a SAML token.
        password:
          type: string
          description: Password of the OneLogin user accessing the app for which you
            want to generate a SAML token.
        app_id:
          type: string
          description: App ID of the app for which you want to generate a SAML token.
            This is the app ID in OneLogin.
        subdomain:
          type: string
          description: Set to the subdomain of the OneLogin user accessing the app
            for which you want to generate a SAML token.
        ip_address:
          type: string
          description: "Whitelisted IP address, if MFA is required and you need to\
            \ honor IP address whitelisting defined in MFA policies."
    verifyFactorSaml_request:
      required:
      - app_id
      - device_id
      - state_token
      type: object
      properties:
        app_id:
          type: string
          description: App ID of the app for which you want to generate a SAML token.
            This is the app ID in OneLogin.
        device_id:
          type: string
          description: Provide the MFA device_id you are submitting for verification.
            The device_id is supplied by the Generate SAML Assertion API.
        state_token:
          type: string
          description: state_token associated with the MFA device_id you are submitting.
            The state_token is supplied by the Generate SAML Assertion API.
        otp_token:
          type: string
          description: Provide the OTP value for the MFA factor you are submitting
            for verification.
        do_not_notify:
          type: boolean
          description: "When verifying MFA via Protect Push, set this to true to stop\
            \ additional push notifications being sent to the OneLogin Protect device."
    verifyFactorSaml_200_response:
      type: object
      properties:
        data:
          type: string
          description: Provides the SAML assertion.
        message:
          type: string
          description: Plain text description describing the outcome of the response.
      example:
        data: data
        message: message
    createEnvironmentVariable_request:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: The name for the environment variable that will be used to
            retrieve the value from a hook function.
        value:
          type: string
          description: The secret value that will be encrypted at rest and injected
            in applicable hook functions at run time.
    updateEnvironmentVariable_request:
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: The secret value that will be encrypted at rest and injected
            in applicable hook functions at run time.
    getUserApps_200_response_inner:
      type: object
      properties:
        id:
          type: integer
          description: The App ID
        icon_url:
          type: string
          description: A url for the icon that represents the app in the OneLogin
            portal
        extension:
          type: boolean
          description: Boolean that indicates if the OneLogin browser extension is
            required to launch this app.
        login_id:
          type: integer
          description: Unqiue identifier for this user and app combination.
        name:
          type: string
          description: The name of the app.
        provisioning_status:
          type: string
          enum:
          - enabling
          - disabling
          - enabling_pending_approval
          - disabling_pendding_approval
          - enabled
          - disabled
          - disabling_failed
          - enabling_failed
        provisioning_state:
          type: string
          description: If provisioning is enabled this indicates the state of provisioning
            for the given user.
          enum:
          - unknown
          - provisioning
          - modifying
          - deleting
          - provisioning_pending_approval
          - deleting_pending_approval
          - modifying_pending_approval
          - linking
          - provisioned
          - deleted
          - modifying_failed
          - provisioning_failed
          - deleting_failed
          - linking_failed
          - disabled
          - nonexistent
          - modifying_pending_approval_then_disabled
        provisioning_enabled:
          type: boolean
          description: Indicates if provisioning is enabled for this app.
      example:
        icon_url: icon_url
        provisioning_enabled: true
        login_id: 6
        provisioning_state: unknown
        extension: true
        name: name
        provisioning_status: enabling
        id: 0
    listMappingConditions_200_response_inner:
      type: object
      properties:
        name:
          type: string
          description: The name of the Condition.
        value:
          type: string
          description: The unique identifier of the condition. This should be used
            when defining conditions for a User Mapping.
      example:
        name: name
        value: value
    listMappingConditionOperators_200_response_inner:
      type: object
      properties:
        name:
          type: string
          description: The name or description of the operator.
        value:
          type: string
          description: The condition operator value to use when creating or updating
            User Mappings.
      example:
        name: name
        value: value
    trackEvent_request:
      required:
      - ip
      - user
      - user_agent
      - verb
      type: object
      properties:
        verb:
          type: string
          description: Verbs are used to distinguish between different types of events.
        ip:
          type: string
          description: The IP address of the User's request.
        user_agent:
          type: string
          description: The user agent of the User's request.
        user:
          $ref: '#/components/schemas/risk_user'
        source:
          $ref: '#/components/schemas/source'
        session:
          $ref: '#/components/schemas/session'
        device:
          $ref: '#/components/schemas/risk_device'
        fp:
          type: string
          description: Set to the value of the __tdli_fp cookie.
        published:
          type: string
          description: Date and time of the event in IS08601 format. Useful for preloading
            old events. Defaults to date time this API request is received.
    getRiskScore_request:
      required:
      - ip
      - user
      - user_agent
      type: object
      properties:
        ip:
          type: string
          description: The IP address of the User's request.
        user_agent:
          type: string
          description: The user agent of the User's request.
        user:
          $ref: '#/components/schemas/risk_user'
        source:
          $ref: '#/components/schemas/source'
        session:
          $ref: '#/components/schemas/session'
        device:
          $ref: '#/components/schemas/risk_device'
        fp:
          type: string
          description: Set to the value of the __tdli_fp cookie.
    getRiskScore_200_response:
      type: object
      properties:
        score:
          maximum: 100
          minimum: 0
          type: number
          description: A risk score 0 is low risk and 100 is the highest risk level
            possible.
        triggers:
          type: array
          description: Triggers are indicators of some of the key items that influenced
            the risk score.
          items:
            type: string
      example:
        score: 8.008281904610115
        triggers:
        - triggers
        - triggers
    getRiskScore_400_response:
      type: object
      properties:
        messages:
          type: array
          items:
            type: string
    getScoreInsights_200_response_scores:
      type: object
      properties:
        minimal:
          type: integer
        low:
          type: integer
        medium:
          type: integer
        high:
          type: integer
        very_high:
          type: integer
      example:
        minimal: 0
        high: 5
        low: 6
        very_high: 5
        medium: 1
    getScoreInsights_200_response:
      type: object
      properties:
        scores:
          $ref: '#/components/schemas/getScoreInsights_200_response_scores'
        total:
          type: integer
      example:
        total: 2
        scores:
          minimal: 0
          high: 5
          low: 6
          very_high: 5
          medium: 1
    schema_provisioning:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if provisioning is enabled for this app.
      example:
        enabled: true
    error_status_errors_inner:
      type: object
      properties:
        field:
          type: string
        message:
          type: array
          items:
            type: string
    factor_inner_factor_data:
      type: object
      properties:
        verification_token:
          type: string
          description: The token which can be used to verify the factor registration.
        totp_url:
          type: string
          description: OTP Url that can be leveraged for any authenticator that supports
            the key uri format.
      description: "Array of factor specific properties. For example, the token or\
        \ totp code for OneLogin Protect."
      example:
        totp_url: totp_url
        verification_token: verification_token
    factor_inner:
      type: object
      properties:
        id:
          type: string
          description: MFA device identifier.
        status:
          type: string
          description: "accepted : factor has been verified. pending: registered but\
            \ has not been verified."
          enum:
          - pending
          - accepted
        default:
          type: boolean
          description: True = is user's default MFA device for OneLogin.
        auth_factor_name:
          type: string
          description: "\"Official\" authentication factor name, as it appears to\
            \ administrators in OneLogin."
        type_display_name:
          type: string
          description: "Authentication factor display name as it appears to users\
            \ upon initial registration, as defined by admins at Settings > Authentication\
            \ Factors."
        user_display_name:
          type: string
          description: Authentication factor display name assigned by users when they
            enroll the device.
        expires_at:
          type: string
          description: A short lived token that is required to Verify the Factor.
            This token expires based on the expires_in parameter passed in.
        factor_data:
          $ref: '#/components/schemas/factor_inner_factor_data'
      example:
        type_display_name: type_display_name
        default: true
        factor_data:
          totp_url: totp_url
          verification_token: verification_token
        expires_at: expires_at
        id: id
        auth_factor_name: auth_factor_name
        user_display_name: user_display_name
        status: pending
    status_2_status:
      type: object
      properties:
        type:
          type: string
        code:
          type: integer
        message:
          type: string
        error:
          type: boolean
      example:
        code: 0
        type: type
        message: message
        error: true
    schema_1_added_by:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      example:
        name: name
        id: 6
    hook_options:
      type: object
      properties:
        risk_enabled:
          type: boolean
        location_enabled:
          type: boolean
        mfa_device_info_enabled:
          type: boolean
      description: A set of attributes allow control over the information that is
        included in the hook context.
      example:
        risk_enabled: true
        mfa_device_info_enabled: true
        location_enabled: true
    hook_conditions_inner:
      type: object
      properties:
        source:
          type: string
        operator:
          type: string
        value:
          type: string
      example:
        source: source
        value: value
        operator: operator
  responses:
    token_401:
      description: "Typically, this error means that your client_id and/or client_secret\
        \ values are invalid."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/generateToken_400_response'
    token_404:
      description: "Typically, this error means that you are using the incorrect method.\
        \ Ensure that you are making a POST."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/generateToken_400_response'
    "401_invalid_access_token":
      description: "Typically, this error means that your access token value is invalid."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    status_200:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/id'
    "404_not_found":
      description: Invalid ID
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    status_422:
      description: This name already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    status_invalid_scope:
      description: An invalid scope id has been provided
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    "422_invalid_value":
      description: Indicates that the syntax of the request is good but a value supplied
        is not valid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    app:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/schema'
    "422_id_included":
      description: ID should not be included in the payload body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_status'
    "403_forbidden":
      description: FORBIDDEN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    "400_bad_request":
      description: BAD REQUEST
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    "401_unauthorized":
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/status_1'
    "422_function_not_base64":
      description: You function is not base64 encoded.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/hook_status'
    "200_envvar":
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/envvar'
    "422_unprocessable_entry":
      description: UNPROCESSABLE_ENTRY
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_status'
    "200_risk_rule":
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/risk_rule'
  requestBodies:
    auth_server:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createAuthorizationServer_request'
      required: true
    claim:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/addAccessTokenClaim_request'
      required: true
    scope:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/addScope_request'
      required: true
    app:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/schema'
      required: true
    rule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rule'
      required: true
    role:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/role'
      required: true
    hook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/hook'
      required: true
    user:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
      required: true
    mapping:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/mapping'
      required: true
    risk_rule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/risk_rule'
      required: true
  headers:
    Current-Page:
      description: The index number of the current page being returned.
      style: simple
      explode: false
      schema:
        type: integer
    Page-Items:
      description: The number of items returned in the response.
      style: simple
      explode: false
      schema:
        type: integer
    Total-Count:
      description: The total number of items across all pages.
      style: simple
      explode: false
      schema:
        type: integer
    Total-Pages:
      description: The total number of pages to return all results.
      style: simple
      explode: false
      schema:
        type: integer
    Link:
      description: "A set of urls which contains premade links for first, next"
      style: simple
      explode: false
      schema:
        type: array
        items:
          type: string
    Before-Cursor:
      description: A string that can be used to request the page of results that preceed
        the current page using the same set of search filters and pagination options.
      style: simple
      explode: false
      schema:
        type: string
    After-Cursor:
      description: A string that can be used to request the page of results that follows
        the current page using the same set of search filters and pagination options.
      style: simple
      explode: false
      schema:
        type: string
